/*
네오는 평소 프로도가 비상금을 숨겨놓는 장소를 알려줄 비밀지도를 손에 넣었다. 그런데 이 비밀지도는 숫자로 암호화되어 있어 위치를 확인하기 위해서는 암호를 해독해야 한다. 다행히 지도 암호를 해독할 방법을 적어놓은 메모도 함께 발견했다.

지도는 한 변의 길이가 n인 정사각형 배열 형태로, 각 칸은 "공백"(" ") 또는 "벽"("#") 두 종류로 이루어져 있다.
전체 지도는 두 장의 지도를 겹쳐서 얻을 수 있다. 각각 "지도 1"과 "지도 2"라고 하자. 지도 1 또는 지도 2 중 어느 하나라도 벽인 부분은 전체 지도에서도 벽이다. 지도 1과 지도 2에서 모두 공백인 부분은 전체 지도에서도 공백이다.
"지도 1"과 "지도 2"는 각각 정수 배열로 암호화되어 있다.
암호화된 배열은 지도의 각 가로줄에서 벽 부분을 1, 공백 부분을 0으로 부호화했을 때 얻어지는 이진수에 해당하는 값의 배열이다.
*/
class Solution {
/*
	문제해결
	1. arr1 배열과 arr2의 배열의 각 요소들을 2진수로 만드는 클래스를 따로 만든다
		1.1 Integer.toBinaryString()함수를 이용해 2진수로 만드는 String 데이터를 만든다.
		1.2 만약 n 만큼의 길이가 안나오면 n만큼의 길이에서 각각 2진의 데이터 길이만큼 빼서 그만큼 0을 채운다.
	2. 함수를 통해 나온 값들을 line1과 line2에 담는다. 
	3. line1과 line2의 값들을 비교해 2진수의 각 자리의 값들을 비교해 둘 중 하나가 1일 경우 최종 결과 string값을 담을 str에 #을 추가한다.
	4. 아닐경우 str에 공백을 추가한다.
	5. answer값 요소에 str을 넣는다.
*/
    public String[] solution(int n, int[] arr1, int[] arr2) {
        String[] answer = new String[n];
        
        for(int i=0; i<n; i++){
            String str = "";
            String line1 = getBinary(n, arr1[i]);
            String line2 = getBinary(n, arr2[i]);
            for(int j=0; j<n; j++){
                if(line1.charAt(j) == '1' || line2.charAt(j) == '1') 
                    str += "#";
                else str += " ";
            }
            answer[i] = str;
        }
        return answer;
    }
    
    private String getBinary(int n, int num){
        String binary = Integer.toBinaryString(num);
        int len = binary.length();
        for(int i=0; i<n-len; i++) binary = "0" + binary;
        return binary;
    }
}