/*
크레인을 작동하면 해당 라인의 가장 상위에 있는 인형이 무조건 뽑히고, (만약 해당 라인에 인형이 하나도 없으면 아무것도 뽑지 않는다)

인형은 바구니에 담는다. 이 때 인형이 연속으로 2개 있으면 터져서 사라진다.

뽑기판 board이 주어지고 뽑는 라인의 순서인 moves이 주어질 때,

터져서 사라진 인형의 갯수를 구해야한다.

게임 화면의 격자의 상태가 담긴 2차원 배열 board와 인형을 집기 위해 크레인을 작동시킨 위치가 담긴 배열 moves가 매개변수로 주어질 때, 크레인을 모두 작동시킨 후 터트려져 사라진 인형의 개수를 return 하도록 solution 함수를 완성해주세요.
*/


import java.util.*;

class Solution {
/*
	문제해결
	1. 바구니 역할을 해줄 stack 선언
	- 0을 넣는 이유는 stack의 맨 위 값과 비교해야 하는데 아무것도 없으면 오류 발생
	2. moves의 길이만큼 반복해준다.
	- board의 길이만큼 반복해준다. (해당 라인을 뽑기 위해서)
	 - 만약 board[i][movenum-1]이 0이 아니라면 
		- stack 바구니 맨 위쪽과 board[i][movenum-1]과 같은지 비교한다.
			- 같다면 stack에 pop을 하고 answer에 2를 더한다.
			- 다르다면 stack에 board[i][movenum-1]을 push한다.
	 - board[i][movenum-1]이 0이라면 없는 것이기 때문에 넘어간다.
	3. answer를 리턴한다.
 
*/

    public int solution(int[][] board, int[] moves) {
        int answer = 0;
        
        Stack<Integer> stack= new Stack<>();
        stack.push(0);
        
        for(int movenum : moves){
            for(int i=0;i<board.length;i++){
             if(board[i][movenum-1]!=0){
                 if(stack.peek()==board[i][movenum-1]){
                     stack.pop();
                     answer+=2;
                 }else{
                     stack.push(board[i][movenum-1]);
                 }
                 board[i][movenum-1]=0;
                 break;
             }   
            }
        }
        return answer;
    }
}