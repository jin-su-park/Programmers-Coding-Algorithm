/*
실패율은 다음과 같이 정의한다.
스테이지에 도달했으나 아직 클리어하지 못한 플레이어의 수 / 스테이지에 도달한 플레이어 수
전체 스테이지의 개수 N, 게임을 이용하는 사용자가 현재 멈춰있는 스테이지의 번호가 담긴 배열 stages가 매개변수로 주어질 때, 실패율이 높은 스테이지부터 내림차순으로 스테이지의 번호가 담겨있는 배열을 return 하도록 solution 함수를 완성하라.
*/
import java.util.*;
class Solution {
/*
	문제해결방법
	1. 각 사용자마다 멈춰있는 스테이지에 대한 개수를 체크하는 stageCount배열을 선언해 stages 마다 해당 stageCount 인덱스 값을 증가시킨다. (다만 stages의 값이 전체 스테이지 수보다 크다면 넘어간다.)
	2. stageCount만큼 반복해 전체 사용자 수를 세는 total 변수를 통해 total이 0이면 실패율을 담는 map 인 failPercent에 해당하는 번지수와 0을 담는다. 그렇지 않다면 해당 인덱스에 대한 실패율을 계산한다. 그리고 total을 해당 인덱스의 stageCount 값만큼 뺀다.
	3. failPercent의 key에 대한 값들을 가져와 최대 값을 max에 key를 maxKey에 저장하고 answer 인덱스 안에 maxKey+1을 저장하고 해당 key에 대한 값을 삭제한다.
	4. 그 후 answer를 return한다.
*/
    public int[] solution(int N, int[] stages) {
        int[] answer = new int[N];
        int[] stageCount= new int[N];
        Map<Integer,Double> failPercent= new HashMap<>();
        int total= stages.length;
        
        for(int i=0;i<stages.length;i++){
            if(stages[i]==N+1){
                continue;
            }
            stageCount[stages[i]-1]++;
        }
        
        for(int i=0;i<stageCount.length;i++){
            if(total==0){
                failPercent.put(i,0d);
                continue;
            }
            failPercent.put(i,(double)stageCount[i]/(double)total);
            total-=stageCount[i];
        }
        
        for(int i=0; i<N;i++){
            double max=-1;
            int maxKey=0;
            
            for(int key : failPercent.keySet()){
                if(max<failPercent.get(key)){
                    max=failPercent.get(key);
                    maxKey=key;
                }
            }
            answer[i]=maxKey+1;
            failPercent.remove(maxKey);
        }
        
        return answer;
    }
}