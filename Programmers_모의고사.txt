/*
수포자는 수학을 포기한 사람의 준말입니다. 수포자 삼인방은 모의고사에 수학 문제를 전부 찍으려 합니다. 수포자는 1번 문제부터 마지막 문제까지 다음과 같이 찍습니다.

1번 수포자가 찍는 방식: 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, ...
2번 수포자가 찍는 방식: 2, 1, 2, 3, 2, 4, 2, 5, 2, 1, 2, 3, 2, 4, 2, 5, ...
3번 수포자가 찍는 방식: 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, ...

1번 문제부터 마지막 문제까지의 정답이 순서대로 들은 배열 answers가 주어졌을 때, 가장 많은 문제를 맞힌 사람이 누구인지 배열에 담아 return 하도록 solution 함수를 작성해주세요.

제한 조건
시험은 최대 10,000 문제로 구성되어있습니다.
문제의 정답은 1, 2, 3, 4, 5중 하나입니다.
가장 높은 점수를 받은 사람이 여럿일 경우, return하는 값을 오름차순 정렬해주세요.
*/

import java.util.*;
class Solution {
/*
	문제해결
	1. 1번,2번,3번 수포자의 반복되는 답안구간을 배열로 만든다.
	2. 각각 수포자들이 맞춘 개수를 저장할 배열을 선언한다.
	3. 반복문을 통해 answers와 각각 수포자의 반복되는 구간의 값들을 체크해 값이 같으		면 수포자들이 맞춘 배열의 값을 증가시킨다.
	4. 수포자들이 맞춘 배열의 값을 비교해 가장 많이 맞춘 수포자의 개수를 구한다.
	5. 최고 점수를 받은 사람이 몇 명인지 알 수 없고 최고 점수를 받은 사람을 넣기 위해 가변적으로 변하는 리스트인 result를 선언한다.
	6. max의 값과 score의 배열의 각을 비교해 같으면 해당 수포자의 숫자를 result에 넣	는다.
	7. 최고 점수를 받은 사람을 넣은 result의 size만큼 길이를 가진 answer배열을 선언하다.
	8. result의 값을 answer에 담고 answer를 리턴한다.
*/
    public int[] solution(int[] answers) {
        int[] answer1 = {1,2,3,4,5};
        int[] answer2= {2,1,2,3,2,4,2,5};
        int[] answer3= {3,3,1,1,2,2,4,4,5,5};
        int[] score=new int[3];
        for(int i=0; i<answers.length;i++){
            if(answers[i]==answer1[i%answer1.length]) score[0]++;
            if(answers[i]==answer2[i%answer2.length]) score[1]++;
            if(answers[i]==answer3[i%answer3.length]) score[2]++;
        }
        int max=Math.max(Math.max(score[0],score[1]),score[2]);
        List<Integer> result= new ArrayList<>();
        if(max==score[0]) result.add(1);
        if(max==score[1]) result.add(2);
        if(max==score[2]) result.add(3);
        int[] answer= new int[result.size()];
        for(int i=0;i<result.size();i++){
            answer[i]=result.get(i);
        }
        return answer;
    }
}