프로그래머스 N-Queen
문제
가로, 세로 길이가 n인 정사각형으로된 체스판이 있습니다. 체스판 위의 n개의 퀸이 서로를 공격할 수 없도록 배치하고 싶습니다.
예를 들어서 n이 4인경우 다음과 같이 퀸을 배치하면 n개의 퀸은 서로를 한번에 공격 할 수 없습니다.
체스판의 가로 세로의 세로의 길이 n이 매개변수로 주어질 때, n개의 퀸이 조건에 만족 하도록 배치할 수 있는 방법의 수를 return하는 solution함수를 완성해주세요.
아이디어
해당 n의 크기만큼  체스판을 반복한다. 
만약 해당 행을 방문하지 않았다면 방문처리하고 해당 위치의 열에 대한 행을 저장한다. 
만약 해당 열에 대한 검사를 해서 해당 행에 대한 지정 되어있지 않고 해당 위치에 대한 대각선 값들이 방문되어 있지 않다면 해당 열을 증가시킨 함수를 실행시킨다. 방문 이후 그 함수가 아니라면 해당 열에 대한 방문을 안했다는 처리를 하고 방문한 열의 수와 n의 크기가 같다면 함수를 종료시키고 경우의 수를 1 증가시키고 종료한다.
자료구조
DFS(int n,int queen) : 해당 체스판을 탐색하기 위한 함수
n : 정사각형의 크기
queen : 놓은 퀸의 개수

boolean visited[] : 퀸을 놓은 행에 위치를 했다는 것을 표시하기 위한 boolean 배열
int[] fit : 해당 퀸의 위치(행)에 대한 열의 위치를 값으로 넣은 int 배열
int answer : 해당 경우의 수 
for문을 통해 n번 반복한다.
해당 visited 의 위치 값이 false인 경우 해당 위치의 visited 값을 true로 바꾸고 퀸의 행에 대한 열의 위치를 fit배열에 저장한다. 만약 해당 위치의 queen이 올바른 위치인지 판단이 되면 queen을 놓은 개수를 1증가시키고 함수를 반복한다. 만약 퀸의 개수가 n의 크기와 같아지면 경우의 수를 증가시키고 종료시킨다. 그 이후 그 전으로 돌아가서 열에 대한 퀸의 방문여부를 다 false로 만든다.
Check(int queen) : 해당 퀸의 위치가 옳은 위치인지 판단하는 함수 
해당 퀸의 위치까지 반복한다. 퀸의 행위치에 대한 열의 값이 같다면 거짓, 그리고 대각선의 위치에 있다면 거짓으로 판단한다. 그 외의 경우에는 참으로 판단한다.

소스코드
import java.util.*;
class Solution {
    boolean visited[];
    int[]fit;
    int answer;
    public int solution(int n) {
        visited=new boolean[n];
        fit=new int[n];
        answer = 0;
        DFS(n,0);
        return answer;
    }
    
    public void DFS(int n,int queen){
        if(n==queen){
            answer++;
            return;
        }
            for(int i=0;i<n;i++){
                if(visited[i]==false){
                    visited[i]=true;
                    fit[queen]=i;
                    if(check(queen)) DFS(n,queen+1);
                    visited[i]=false;
                }
            }
    }
    
    public boolean check(int queen){
        for(int i=0;i<queen;i++){
            if(fit[i]==fit[queen])return false;
            if(Math.abs(queen-i)==Math.abs(fit[i]-fit[queen])) return false;
        }
        return true;
    }
}

